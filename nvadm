#!/usr/bin/env bash
#
# Manage node versions on SmartOS
#
# Author: Dave Eddy <dave@voxer.com>
# Credits:
#  @dshaw
#  Jeff Biddick
#  Mike Zeller
#

url='http://nodejs.org/dist/'

# Builds are available for node v0.8.x and above
# https://github.com/joyent/node/issues/4031
builds_available_minor=8

PREFIX=${PREFIX:-/opt/local}

# sort semver
semversort() {
	tr -d v | sort -t . -k1,1n -k2,2n -k3,3n
}

# extract node versions from the website
versionfilter() {
	awk '/^<a href="v/ { match($0, /(v[^/]+)/); print substr($0, RSTART, RLENGTH); }'
}

usage() {
	local cmd=${0##*/}
	cat <<-EOF
	Usage: $cmd <command> [options]

	Manage Node.JS versions

	Commands
	  list        list all possible node versions to install
	  install     install a given version of node
	  help        this message

	Examples
	  list all available node versions
	    $cmd list

	  install a specific version of node
	    $cmd install v0.8.8
	EOF
}

list() {
	local versions=$(curl -sS "$url" | versionfilter | semversort)
	if (( $? != 0 )) || [[ -z "$versions" ]]; then
		echo "Error getting list! ($url)" >&2
		echo ':: DEBUG ::' >&2
		echo "$versions" >&2
		exit 1
	fi

	cat <<-EOF
	Current Version
	node: $(node -v)
	npm: $(npm -v)

	EOF
	echo -e "\nJoyent Available Versions"
	local version current_minor major minor patch i=0
	while read version; do
		IFS=. read major minor patch <<< "${version#v}"
		if (( minor >= builds_available_minor )); then # && _exists -q "$version"; then
			if [[ "$minor" != "$current_minor" ]]; then
				echo -e "\n - Node $major.$minor.x - "
				i=0
			fi
			printf '%-10s' "v$version"
			(( (++i % 6) == 0 )) && echo
			current_minor=$minor
		fi
	done <<< "$versions"
	echo
}

install() {
	local version=$1
	local arch=${2:-x86}
	if [[ -z "$version" ]]; then
		echo 'Version must be specified' >&2
		usage >&2
		exit 1
	fi

	_exists "$version" "$arch" || exit $?
	local remote_tarball=$url/$version/node-$version-sunos-$arch.tar.gz
	local local_tarball=$version.tar.gz

	local dir='/var/tmp/nvadm/node'
	echo "Clearing and recreating $dir"
	rm -rf "$dir"
	mkdir -p "$dir"

	echo -n "Downloading $remote_tarball... "
	if cd "$dir" && curl -sS "$remote_tarball" -o "$local_tarball" && [[ -s "$local_tarball" ]]; then
		echo 'done'
		set -x
		tar --no-same-owner -xf "$local_tarball"
		# this is rough
		local newdir=/dev/null
		for f in *; do
			if [[ -d $f ]]; then
				newdir=$f
				break
			fi
		done
		cd "$newdir" && rsync -a ./ "$PREFIX" || { echo 'failed to install!' >&2; exit 2; }
		set +x
		cat <<-EOF

		Installed!

		node: $("$PREFIX/bin/node" -v)
		npm: $("$PREFIX/bin/npm" -v)
		EOF
	else
		echo 'failed to download!' >&2
		exit 2
	fi
}

_exists() {
	local quiet=false
	if [[ "$1" == '-q' ]]; then
		quiet=true
		shift
	fi
	local version=$1
	local arch=${2:-x86}
	local remote_tarball=$url/$version/node-$version-sunos-$arch.tar.gz
	if ! a=$(curl -sSI "$remote_tarball" | head -1 | grep '200 OK'); then
		$quiet || echo "SunOS Package for $version does not exist :("
		return 1
	fi
	$quiet || echo "$a"
	return 0
}

command=$1
shift
case "$command" in
	list|ls) list;;
	install|in) install "$@";;
	-h|--help|help) usage; exit 0;;
	*) usage >&2; exit 1;;
esac
